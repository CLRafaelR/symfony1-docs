Dia 1: Iniciando o Projeto
==========================

Introdução
----------

O [symfony](http://www.symfony-project.org/) vem sendo um
projeto Open-Source por mais de quatro anos e se tornou um dos mais
populares frameworks PHP graças aos seus ótimos recursos e excelente documentação.

Este livro descreve a criação de uma aplicação web com o symfony,
passo-a-passo a partir das especificações até a implementação. Ele é direcionado
para os iniciantes que querem aprender a usar o symfony, entender como ele funciona, e
também aprender sobre as melhores práticas de desenvolvimento web.

A aplicação a ser montada poderia ser outra relacionada a blog. Mas nós
queremos usar o symfony num projeto útil. O objetivo é demonstrar que o symfony
pode ser usado para desenvolver aplicações profissionais com estilo e pouco esforço.

Nós iremos manter o conteúdo do projeto secreto por mais um dia pois já
temos bastante por enquanto. No entanto, vamos dar para ele um nome: **Jobeet**.

Cada dia desse livro é feito para durar entre uma e duas horas, e 
será a oportunidade para aprender symfony programando um site de verdade, do início ao fim.
Todo dia novas funcionalidades serão adicionadas à aplicação e nós
vamos aproveitar esse desenvolvimento para apresentar você para tanto para os novos recursos do symfony
quanto as melhores práticas no desenvolvimento web com symfony.

Este Livro é diferente
----------------------

Lembra dos tempos iniciais do PHP4. Ah, la [Belle
Epoque](http://en.wikipedia.org/wiki/Belle_Époque)! PHP foi uma das primeiras
linguagens dedicadas para a web e uma das mais fáceis de aprender.

Mas como as tecnologias web evoluem muito rápido, os desenvolvedores precisam
se manter atualizados com as últimas melhores práticas e ferramentas. A melhor forma de aprender é com certeza
lendo blogs, tutoriais e livros. Nós lemos um bocado desses, sejam escritos para
PHP, Python, Java, Ruby or Perl, e muitos deles se mostram insuficientes quando
o autor começa a fornecer exemplos de trechos de código.

Você provavelmente está acostumado a ler avisos do tipo:

  "Numa aplicação real não esqueça de adicionar validação e tratamento de erros apropriado."
  
ou

  "A segurança é deixada como um exercício para o leitor."
  
ou

  "Você terá, é claro, que escrever testes"

O quê? Essas coisas são um negócio sério. Elas talvez sejam a parte mais importante
de qualquer pedaço de código. E, como um leitor, você foi deixado sozinho. Sem essas
preocupações sendo analisadas, os exemplos se são muito menos úteis. Você não pode
usá-los como um bom ponto de partida. Isso é péssimo. Por quê? Porque segurança, validação,
tratamento de erros e testes, apenas listando alguns, zelam para um código correto.

Neste livro você nunca irá ver declarações como essas pois nós vamos escrever testes,
tratamento de erros, validação do código,  e ter certeza que nós desenvolvemos uma aplicação segura.
Isso porque symfony é sobre programar, mas também sobre melhores práticas e como desenvolver
aplicações profissionais para empresas. Nós podemos nós dar esse luxo porque o symfony
provê todas essas ferramentas para programar esses aspectos facilmente e sem
escrever muito código.

Validação, tratamento de erros, segurança e testes são cidadões de primeira-classe no
symfony, então isso não nos tomará muito tempo para explicações. Está é apenas uma das razões porque
usar um framework para projetos "de verdade".

Todo o código que você ler neste livro é código que você poderá usar em um projeto real.
Nós encorajamos que você copie e cole trechos de código ou mesmo roubar pedaços inteiros.

O Que Temos para Hoje?
----------------------

Nós não iremos escrever código PHP. Mas mesmo sem escrever uma única linha de código, você
vai começar a entender os benefícios de usar um framework como o symfony, apenas por
inicializar um novo projeto.

O objetivo desse dia é configurar o ambiente de desenvolvimento e
mostrar uma página da aplicação no seu navegador. Isso inclui a instalação
do symfony, a criação da aplicação e a configuração do servidor web.

Como esse livro se focará principalmente no symfony framework, nós iremos assumir que você
já tem um conhecimento sólido de PHP 5 e programação orientada a objetos.

Pré-requisitos
-------------s

Antes de instalar o symfony, você precisa verificar se seu computador tem tudo
instalado e configurado corretamente. Leve o tempo que for para ler conscientemente
este dia e siga todos os passos necessários para validar sua sua configuração pois
isso pode salvar sua pele mais para a frente.

### Software de Terceiros

Antes de tudo, você precisar verificar se seu computador tem um ambiente amigável de
desenvolvimento web funcionando. No mínimo você precisa de um servidor web (Apache,
por exemplo), um banco de dados (MySQL, PostgreSQL, SQLite, ou qualquer banco
compatível com [PDO](http://www.php.net/PDO)) e PHP 5.2.4 ou posterior.

### Interface de Linha de Comando

O symfony framework vem com uma ferrament de linha de comando que automatiza
um monte de trabalho para você. Se você é um usúario de sistema operacional
Unix-like vai se sentir em casa. Se você rodar um sistema Windows ele também funcionará bem,
mas você só terá que digitar alguns comandos no prompt `cmd`.

>**Nota**
>Os comandos do Unix shell podem ser úteis num ambiente Windows.
>Se você gostaria de usar ferramentas como `tar`, `gzip` or `grep` no Windows, você
>pode instalar o [Cygwin](http://cygwin.com/).
>Os mais aventureiros podem gostar de tentar também o 
>[Windows Services for Unix](http://technet.microsoft.com/en-gb/interopmigration/bb380242.aspx) da Microsoft.

### Configuração do PHP

Como as configurações do PHP podem variar bastante de um SO para outro, ou mesmo entre
diferentes distribuições do Linux, você precisa verificar se a sua configuração atende
os requisitos mínimos do symfony.

Primeiro, assegure que você tenha pelo menos o PHP 5.2.4 instalado usando a funcão
embutida `phpinfo()` or rodando `php -v` na linha de comando. Fique atento que em
algumas configurações você pode ter instaladas duas versões diferentes do PHP: uma para
a linha de comando e outra para a web.

Então, faça o download do script symfony para verificar a configuração na seguinte URL:

    http://sf-to.org/1.4/check.php

Salve o script em algum lugar na raiz do seu diretório web atual. Inicie o 
script pela linha de comando:

    $ php check_configuration.php
    
Se houver algum problema com sua configuração do PHP, a saída da comando
dará dicas do que e como corrigi-lo.

Você deveria também executar o verificador a partir de um navegador e corrigir
os problemas que possa descobrir. Isso se deve ao PHP tem um arquivo de configuração
`php.ini` distinto para esses dois ambientes, com diferentes configurações.

>**NOTA**
>Não esqueça de remover posteriormente esse arquivo da raiz do seu diretório web.

Instalação do Symfony
---------------------

### Inicializando o Diretório do Projeto

Antes de instalar o symfony, você precisa criar um diretório que vai hospedar
todos os arquivos relacionados ao Jobeet:

    $ mkdir -p /home/sfprojects/jobeet
    $ cd /home/sfprojects/jobeet

Ou no Windows:

    c:\> mkdir c:\development\sfprojects\jobeet
    c:\> cd c:\development\sfprojects\jobeet

>**NOTA**
>Os usuários de Windows são alertados que para rodar o symfony e configurar seu novo projeto em uma
>pasta que não contenha espaços. Tente não usar o diretório `Documents and Settings` 
>incluindo qualquer lugar dentro dos `Meus Documentos`.

-

>**DICA**
>Se você criar o diretório do projeto symfony dentro do seu web root, você
>não precisará de configurar seu servidor web. É claro que ambientes
>de produção, nós encorajamos fortemente que você configure seus servidor web como
>explicado na seção configuração do servidor web.

### Escolhendo a Versão do Symfony

Agora você precisa instalar o symfony. Como ele tem várias versões estáveis,
você precisa escolher a que você quer lendo a 
[página de instalação](http://www.symfony-project.org/installation) no
site do symfony

O livro supõe que você quer instalar a o symfony 1.3 ou 1.4.

### Escolhendo o Local para Instalar o Symfony

Você pode instalar o symfony globalmente na sua máquina, ou incomporá-lo em cada um dos seus
projetos. A última opção é recomendada pois seus projetos ficarão serão totalmente
independentes dos outros. Atualizar seu symfony instalado localmente não irá
quebrar um dos seus projetos de forma inesperada. Isso significa que você poderá possuir
projetos com diferentes versões do symfony e atualizar um de cada vez como você precisar.

Como uma melhor prática muitas pessoas instalam os arquivos do symfony framework no diretório `lib/vendor` do projeto.
Então, primeiramente, crie esse diretório:

    $ mkdir -p lib/vendor

### Instalando o Symfony

#### Instalando a partir de um Arquivo

O modo mais fácil e instalar o symfony é baixar o arquivo da versão que
você escolheu do site do symfony. Vá para a página de instalação para a versão
escolhida, symfony
[1.4](http://www.symfony-project.org/installation/1_4) por exemplo.

Embaixo da seção "**Source Download**", você vai encontrar o arquivo nos formatos `.tgz` ou
`.zip`. Faça o download do arquivo, coloque dentro do seu diretório recém-criado `lib/vendor`,
descompacte-o e renomei o diretório para `symfony`:

    $ cd lib/vendor
    $ tar zxpf symfony-1.4.0.tgz
    $ mv symfony-1.4.0 symfony
    $ rm symfony-1.4.0.tgz

No Windows, você pode descompactar o arquivo zip pelo Windows Explorer.
Depois de renomear o diretório para `symfony`, deve existir uma estrutura
de diretório parecida com `c:\dev\sfprojects\jobeet\lib\vendor\symfony`.

#### Instalando a partir do Subversion (recomendado)

Se você usa o Subversion, é até melhor usar a propriedade `svn:externals` para incorporar
o symfony no seu projeto no diretório `lib/vendor`:

    $ svn pe svn:externals lib/vendor/

>**NOTa**
>A importação do seu projeto em um novo repositório Subversion é explicado no fim
>deste dia.

Se tudo correr bem, esse comando irá abrir seu editor preferido e dar a você
a oportunidade de configurar as fontes externas do Subversion.

>**DICA**
>No Windows você pode usar ferramentas como o [TortoiseSVN](http://tortoisesvn.net/)
>para fazer tudo sem usar o console.

Se você for conservador, aponte seu projeto para um release específico (uma tag
do subversion):

    symfony http://svn.symfony-project.com/tags/RELEASE_1_4_0

Sempre que um novo release for lançado (como anunciado no
[blog](http://www.symfony-project.org/blog/) do symfony), você terá que mudar a URL
para a nova versão.

Se você quiser quiser o caminho mais instável, use o branch 1.4:

    symfony http://svn.symfony-project.com/branches/1.4/

Usando esse branch faz com que seu projeto se beneficie da correção de bugs automaticamente
sempre que você rodar um `svn update`.

#### Verificação da Instalação

Agora que o symfony está instalado, verifique que tudo está funcionando usando a 
linha de comando do symfony para mostrar a versão do symfone (note que é um `V` maiúsculo):

    $ cd ../..
    $ php lib/vendor/symfony/data/bin/symfony -V

No Windows:

    c:\> cd ..\..
    c:\> php lib\vendor\symfony\data\bin\symfony -V

>**DICA**
>Se você estiver curioso sobre o que esta ferramenta de linha de comando pode fazer por você, digite
>`symfony` para listar as opções e tarefas disponíveis:
>
>     $ php lib/vendor/symfony/data/bin/symfony
>
>No Windows:
>
>     c:\> php lib\vendor\symfony\data\bin\symfony
>
>A linha de comando do symfony é a melhor amiga do desenvolvedor. Ela provê vários
>utilitários que aumentam sua produtividade para as atividades do dia-a-dia como
>limpar o cache, geração de código e muito mais.

Configuração do Projeto
-----------------------

No symfony, as **aplicações** compartilhando o mesmo modelo de dados são 
reagrupados em **projetos**. Para a maioria dos projetos, você terá duas
aplicações diferentes: um Frontend e um Backend.

### Criação do Projeto

A partir do diretório `sfprojects/jobeet`, rode a tarefa symfony `generate:project`
para criar de fato o projeto symfony:

<doctrine>
    $ php lib/vendor/symfony/data/bin/symfony generate:project jobeet
</doctrine>
<propel>
    $ php lib/vendor/symfony/data/bin/symfony generate:project jobeet --orm=Propel
</propel>

No Windows:

<doctrine>
    c:\> php lib\vendor\symfony\data\bin\symfony generate:project jobeet
</doctrine>
<propel>
    c:\> php lib\vendor\symfony\data\bin\symfony generate:project jobeet --orm=Propel
</propel>

A tarefa `generate:project` gera a estrutura padrão de diretórios e arquivos necessários
para um projeto symfony.

 | Diretório   | Descrição
 | ----------- | ------------------------------------------------
 | `apps/`     | Armazena todas as aplicações do projeto
 | `cache/`    | Os arquivos armazenados em cache pelo framework
 | `config/`   | Os arquivos de configuração do projeto
 | `lib/`      | As classes e bibliotecas do projeto
 | `log/`      | Os arquivos de log do framework
 | `plugins/`  | Os plugins instalados
 | `test/`     | Os arquivos de testes unitários e funcionais
 | `web/`      | O diretório web root (veja mais abaixo)

>**NOTA**
>Por que o symfony cria tantos arquivos? Um dos maiores benefícios de usar
>um framework full-stack é para padronizar seus desenvolvimentos. Graças a
>estrutura padrão de arquivos e diretórios do symfony, qualquer desenvolvedor com
>algum conhecimento em symfony pode assumir a manutenção de um projeto symfony.
>Em questão de minutos, ele estará apto a se aprofundar no código, consertar bugs
>e adicionar novas funcionalidades.

O comando `generate:project` também criou um atalho `symfony` na raiz do diretório
do projeto para diminuir o número de caracteres que você precisa escrever quando
roda um comando.

Então, a partir de agora, em vez de usar o caminho completo para o program symfony,
você pode usar o atalho `symfony`.

### Criação da Aplicação

Agora, crie a aplicação Frontend rodando o comando `generate:app`:

    $ php symfony generate:app frontend

>**DICA**
>Devido ao atalho do symfony ser executável, os usuários de Unix podem trocar
>todas as chamadas de '`php symfony`'por '`./symfony`' a partir de agora.
>
>No Windows você poe copiar o arquivo '`symfony.bat`' para seu projeto e usar
>'`symfony`' em vez de '`php symfony`':
>
>     c:\> copy lib\vendor\symfony\data\bin\symfony.bat .

Baseado no nome da aplicação dado como um *argumento*, o comando `generate:app`
criada a estrutura padrão de diretórios necessária para a aplicação dentro do
diretório `apps/frontend/`:

 | Diretório    | Descrição
 | ------------ | ----------------------------------------
 | `config/`    | Os arquivos de configuração da aplicação
 | `lib/`       | As classes e bibliotecas da aplicação
 | `modules/`   | O código da aplicação (MVC)
 | `templates/` | Os arquivos de template globais

>**SIDEBAR**
>Segurança
>
>Por padrão, o comando `generate:app` deixou sua aplicação segura das duas
>vunerabilidades mais difundidas na web. É certo, o symfony
>automaticamente toma medidas de segurança em nosso nome.
>
>Para prevenir ataques de XSS, o output escaping foi habilitado; e para prevenir
>ataques CSRF, uma chave CSRF randômica foi gerada.
>
>É claro que você pode ajustar essas configurações com as seguints *opções*:
>
>  * `--escaping-strategy`: Habilita ou desabilita o output escaping
>  * `--csrf-secret`: Habilita os session tokens nos formulários
>
>Se você não sabe nada sobre
>[XSS](http://en.wikipedia.org/wiki/Cross-site_scripting) ou
>[CSRF](http://en.wikipedia.org/wiki/CSRF), tire um tempo para aprender mais sobre
>essas vunerabilidades de segurança.

### Permissões na Estrutura de Diretórios

Antes de tentar acessar seu projeto recentemente criado, você precisar configurar as permissões
de escrita nos diretórios `cache/` e `log/` para os níveis apropriados, assim
o servidor web poderá escrever neles:

    $ chmod 777 cache/ log/

>**SIDEBAR**
>Dicas para as pessoas usando uma ferramenta SCM
>
>o symfony só escreve em dois diretórios de um projeto symfony,
>`cache/` e `log/`. O conteúdo desses diretórios deve ser ignorado
>pelo seu SCM (editando a propriedade `svn:ignore` se você estiver usando o Subversion
>por exemplo).

Configuração do Servidor Web: O jeito feio
------------------------------------------

Se você já criou o diretório do projeto em algum lugar dentro do diretório web root
do seu servidor web, você já pode acessar o projeto em um navegador.

É claro que como ele não foi teve nenhuma configuração, é muito rápido para configurar, mas tente
acessar o arquivo `config/databases.yml` no seu navegador para entender as consequências ruins de uma
atitude tão preguiçosa. Se o usuário souber que o seu site é
desenvolvido com o symfony, ele terá acesso a uma série de arquivos confidenciais.

**Nunca use essa configuração num servidor de produção**, e leia a seguinte seção para aprender
como configurar seu servidor web adequadamente.


Configuração do Servidor Web: O modo seguro
-------------------------------------------

Uma boa prática na web é colocar no seu diretório web root apenas os arquivos
necessários para serem acessados pelo um navegador, como folhas de estilo, JavaScripts e imagens.
Por padrão, nós recomendamos colocar esses arquivos dentro do sub-diretório `web/` do
projeto symfony.

Se você der uma olhada nesse diretório, você vai encontrar alguns sub-diretórios para
web assets (`css/` and `images/`) e dois arquivos front controller. Os 
front controllers são os únicos arquivos PHP que precisam ficar dentro do diretório 
web root. Todos os outros arquivos PHP podem ficar escondidos do navegador, o que é uma boa
ideia contando que diz respeito à segurança.

### Configuração do Servidor Web

Agora é hora de mudar sua configuração do Apache para fazer com que o novo
projeto fique acessível para o mundo.

Localize e abra o arquivo de configuração `httpd.conf` e adicione as seguintes
configurações no final:

    # Garanta que você só tem está linha uma vez na sua configuração
    NameVirtualHost 127.0.0.1:8080

    # Esta é a configuração para seu projeto
    Listen 127.0.0.1:8080

    <VirtualHost 127.0.0.1:8080>
      DocumentRoot "/home/sfprojects/jobeet/web"
      DirectoryIndex index.php
      <Directory "/home/sfprojects/jobeet/web">
        AllowOverride All
        Allow from All
      </Directory>

      Alias /sf /home/sfprojects/jobeet/lib/vendor/symfony/data/web/sf
      <Directory "/home/sfprojects/jobeet/lib/vendor/symfony/data/web/sf">
        AllowOverride All
        Allow from All
      </Directory>
    </VirtualHost>

>**NOTA**
>O alias do Apache `/sf` dá acesso as imagens e arquivos javascript necessários
>para mostrar adequadamento as páginas padrões do symfony e a Web Debug Toolbar.
>
>No Windows, você precisa trocar a linha `Alias` por algo como:
>
>     Alias /sf "c:\dev\sfprojects\jobeet\lib\vendor\symfony\data\web\sf"
>
>E `/home/sfprojects/jobeet/web` deve ser substituído por:
>
>     c:\dev\sfprojects\jobeet\web

Está configuração faz o Apache escutar a porta `8080` da sua máquina, assim, 
depois de reiniciar o Apache, o site estará acessível na seguinte URL:

    http://localhost:8080/

Você pode mudar `8080` por qualquer número, mas são favoráveis números maiores que `1024` pois
eles não necessitam privilégios de administrador

>**SIDEBAR**
>Configure um Domain Name dedicado
>
>Se você for o administrador da sua máquina, é melhor configurar
>um Virtual Host em vez de adicionar um nova porta cada vez que você iniciar um novo
>projeto. Em vez de escolher a porta e adicionar uma declaração `Listen`,
>escolha um domain name (por exemplo o domain name real com
>`.localhost` adicionado no fim) e inclua uma declaração `ServerName`:
>
>     # Esta é a configuração para seu projeto
>     <VirtualHost 127.0.0.1:80>
>       ServerName www.jobeet.com.localhost
>       <!-- mesma configuração de antes -->
>     </VirtualHost>
>
>O domain name `www.jobeet.com.localhost` usado na configuração do Apache
>tem que ser declarada localmente. Se você está num sistema Linux, isso precisa ser
>feito no arquivo `/etc/hosts`. Se você roda Windows XP, este arquivo está
>localizado no diretório `C:\WINDOWS\system32\drivers\etc\`.
>
>Inclua a seguinte linha::
>
>     127.0.0.1 www.jobeet.com.localhost

### Teste a nova configuração

Reinicie o Apache, e verifique se você tem acesso para a nova aplicação
abrindo o navegador e digitando `http://localhost:8080/index.php/`, or
`http://www.jobeet.com.localhost/index.php/` dependendo da configuração 
do Apache que você escolheu na seção anterior.

![Parabéns](http://www.symfony-project.org/images/jobeet/1_4/01/congratulations.png)

>**DICA**
>Se você tiver o instalado o módulo do Apache `mod_rewrite`, você pode remover
>a parte `index.php/` da URL. Isso é possível graças as
>regras de rewriting configuradas no arquivo `web/.htaccess`.

Você deveria também tentar acessar a aplicação no ambiente de desenvolvimento
(veja a próxima seção para mais informações sobre ambientes). Digite 
a seguinte URL:

    http://www.jobeet.com.localhost/frontend_dev.php/
    
A web debug toolbar deve ser mostrada no canto superior direito, incluindo pequenos ícones
confirmando que sua configuração do alias `sf/` está correta.

![web debug toolbar](http://www.symfony-project.org/images/jobeet/1_4/01/web_debug_toolbar.png)

>**Nota**
>A configuração é um pouco diferente se você quiser rodar o symfony num servidor IIS
>num ambiente Windows. Ache que configurá-lo neste
>[tutorial relacionado](http://www.symfony-project.com/cookbook/1_0/web_server_iis).

The ~Environments~
------------------

If you have a look at the `web/` directory, you will find two PHP files:
`index.php` and `frontend_dev.php`. These files are called **front
controllers**; all requests to the application are made through them. But why do
we have two ~front controllers|Front Controller~ for each application?

Both files point to the same application but for different **environments**.
When you develop an application, except if you develop directly on the
production server, you need several environments:

  * The **development environment**: This is the environment used by **web
    developers** when they work on the application to add new features, fix
    bugs, ...

  * The **test environment**: This environment is used to automatically test
    the application.

  * The **staging environment**: This environment is used by the **customer**
    to test the application and report bugs or missing features.

  * The **production environment**: This is the environment **end users**
    interact with.

What makes an environment unique? In the development environment for instance,
the application needs to log all the details of a request to ease debugging, but
the cache system must be disabled as all changes made to the code must be taken
into account right away. So, the development environment must be optimized for
the developer. The best example is certainly when an ~exception|Exception
Handling~ occurs. To help the developer debug the issue faster, symfony displays
the exception with all the information it has about the current request right
into the browser:

![An exception in the dev
environment](http://www.symfony-project.org/images/jobeet/1_4/01/exception_dev.png)

But on the production environment, the cache layer must be activated and, of
course, the application must display customized error messages instead of raw
exceptions. So, the production environment must be optimized for performance and
the user experience.

![An exception in the prod
environment](http://www.symfony-project.org/images/jobeet/1_4/01/exception_prod.png)

>**TIP**
>If you open the front controller files, you will see that their content is
>the same except for the environment setting:
>
>     [php]
>     // web/index.php
>     <?php
>
>     require_once(dirname(__FILE__).'/../config/ProjectConfiguration.class.php');
>
>     $configuration = ProjectConfiguration::getApplicationConfiguration('frontend', 'prod', false);
>     sfContext::createInstance($configuration)->dispatch();

The web debug toolbar is also a great example of the usage of environment. It is
present on all pages in the development environment and gives you access to a
lot of information by clicking on the different tabs: the current application
configuration, the logs for the current request, the SQL statements executed on
the database engine, memory information, and time information.

~Subversion~
------------

It is a good practice to use source version control when developing a web
application. Using a source version control allows us to:

 * work with confidence
 * revert to a previous version if a change breaks something
 * allow more than one person to work efficiently on the project
 * have access to all the successive versions of the application

In this section, we will describe how to use
[Subversion](http://subversion.tigris.org/) with symfony. If you use another
source code control tool, it must be quite easy to adapt what we describe for
Subversion.

We assume you have already access to a Subversion server and can access it via
HTTP.

>**TIP**
>If you don't have a Subversion server at your disposal, you can create a
>repository for free on [Google Code](http://code.google.com/hosting/) or
>just type "free subversion repository" in Google to have a lot more options.

First, create a repository for the `jobeet` project on the repository server:

    $ svnadmin create /path/to/jobeet/repository

On your machine, create the basic directory structure:

    $ svn mkdir -m "created default directory structure"
    ➥ http://svn.example.com/jobeet/trunk
    ➥ http://svn.example.com/jobeet/tags
    ➥ http://svn.example.com/jobeet/branches

And checkout the empty `trunk/` directory:

    $ cd /home/sfprojects/jobeet
    $ svn co http://svn.example.com/jobeet/trunk/ .

Then, remove the content of the `cache/` and `log/` directories as we don't want
to put them into the repository.

    $ rm -rf cache/* log/*

Now, make sure to set the write permissions on the cache and logs directories to
the appropriate levels so that your web server can write to them:

    $ chmod 777 cache/ log/

Now, import all the files and directories:

    $ svn add *

As we will never want to commit files located in the `cache/` and `log/`
directories, you need to specify an ignore list:

    $ svn propedit svn:ignore cache

The default text editor configured for SVN should launch. Subversion must ignore
all the content of this directory:

    *

Save and quit. You're done.

Repeat the procedure for the `log/` directory:

    $ svn propedit svn:ignore log

And enter:

    *

Finally, commit these changes to the repository:

    $ svn import -m "made the initial import" .
      ➥ http://svn.example.com/jobeet/trunk

>**Tip**
>~Windows~ users can use the great [TortoiseSVN](http://tortoisesvn.tigris.org/)
client to manage their subversion repository.

Final Thoughts
--------------

Well, time is over! Even if we have not yet started talking about symfony, we
have setup a solid development environment, we have talked about web development
best practices, and we are ready to start coding.

Tomorrow, we will reveal what the application will do and talk about
the requirements we need to implement for Jobeet.

__ORM__